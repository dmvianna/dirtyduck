#+TITLE: Dirty duck: A triage's guided tour
#+AUTHOR: Center of Data Science for Public Policy
#+EMAIL: adolfo@uchicago.edu
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:sql :engine postgresql
#+PROPERTY: header-args:sql+ :dbhost 0.0.0.0
#+PROPERTY: header-args:sql+ :dbport 5434
#+PROPERTY: header-args:sql+ :dbuser food_user
#+PROPERTY: header-args:sql+ :dbpassword some_password
#+PROPERTY: header-args:sql+ :database food
#+PROPERTY: header-args:sql+ :results table drawer
#+PROPERTY: header-args:shell     :results drawer

* Exploring the data

/Which is the spatial distribution of inspections?/


#+BEGIN_SRC sql
select
zip_code,
count(*) as total_inspections,
coalesce(count(*) filter (where result = 'fail'), 0)
as total_failures
from semantic.events
group by zip_code
order by total_inspections desc
limit 10
#+END_SRC

#+RESULTS:
:RESULTS:
| zip_code | total_inspections | total_failures |
|---------+------------------+---------------|
|   60614 |             5223 |          1229 |
|   60647 |             4820 |          1047 |
|   60657 |             4748 |          1070 |
|   60611 |             4519 |           754 |
|   60622 |             4495 |          1133 |
|   60618 |             4159 |           722 |
|   60608 |             4068 |           979 |
|   60639 |             3699 |           901 |
|   60607 |             3687 |           828 |
|   60640 |             3599 |           941 |
:END:

/Which is the temporal distribution of the inspections?/

#+BEGIN_SRC sql
select
extract(year from date) as year, extract(month from date) as month,
count(*) as total_inspections,
coalesce(count(*) filter (where result = 'fail'), 0)
as total_failures
from semantic.events
group by rollup(year, month)
order by year asc, month asc
limit 10
#+END_SRC

#+RESULTS:
:RESULTS:
| year | month | total_inspections | total_failures |
|------+-------+------------------+---------------|
| 2010 |     1 |             1143 |           273 |
| 2010 |     2 |             1284 |           280 |
| 2010 |     3 |             1363 |           310 |
| 2010 |     4 |             1356 |           378 |
| 2010 |     5 |             1478 |           356 |
| 2010 |     6 |             1667 |           413 |
| 2010 |     7 |             1238 |           353 |
| 2010 |     8 |             1515 |           396 |
| 2010 |     9 |             1599 |           406 |
| 2010 |    10 |             1611 |           414 |
:END:

The number of inspections per month and the number of failed
inspections seem to be more or less constant.

#+BEGIN_SRC sql
  select
  code,
  description,
  severity,
  count(*) as total
  from cleaned.violations
  group by code, description, severity
  order by total desc
  limit 10
#+END_SRC

#+RESULTS:
:RESULTS:
| code | description                                                                                                                            | severity | total |
|------+----------------------------------------------------------------------------------------------------------------------------------------+----------+-------|
|   34 | FLOORS: CONSTRUCTED PER CODE, CLEANED, GOOD REPAIR, COVING INSTALLED, DUST-LESS CLEANING METHODS USED                                  | minor    | 78383 |
|   35 | WALLS, CEILINGS, ATTACHED EQUIPMENT CONSTRUCTED PER CODE: GOOD REPAIR, SURFACES CLEAN AND DUST-LESS CLEANING METHODS                   | minor    | 69637 |
|   33 | FOOD AND NON-FOOD CONTACT EQUIPMENT UTENSILS CLEAN, FREE OF ABRASIVE DETERGENTS                                                        | minor    | 69117 |
|   38 | VENTILATION: ROOMS AND EQUIPMENT VENTED AS REQUIRED: PLUMBING: INSTALLED AND MAINTAINED                                                | minor    | 59218 |
|   32 | FOOD AND NON-FOOD CONTACT SURFACES PROPERLY DESIGNED, CONSTRUCTED AND MAINTAINED                                                       | minor    | 58874 |
|   41 | PREMISES MAINTAINED FREE OF LITTER, UNNECESSARY ARTICLES, CLEANING  EQUIPMENT PROPERLY STORED                                          | minor    | 37471 |
|   18 | NO EVIDENCE OF RODENT OR INSECT OUTER OPENINGS PROTECTED/RODENT PROOFED, A WRITTEN LOG SHALL BE MAINTAINED AVAILABLE TO THE INSPECTORS | serious  | 29709 |
|   36 | LIGHTING: REQUIRED MINIMUM FOOT-CANDLES OF LIGHT PROVIDED, FIXTURES SHIELDED                                                           | minor    | 28606 |
|   40 | REFRIGERATION AND METAL STEM THERMOMETERS PROVIDED AND CONSPICUOUS                                                                     | minor    | 17463 |
|   30 | FOOD IN ORIGINAL CONTAINER, PROPERLY LABELED: CUSTOMER ADVISORY POSTED AS NEEDED                                                       | minor    | 17414 |
:END:

This looks weird, the top most "violation" is not an actual
violation. We will repeat the query, we will group by the =results=

#+BEGIN_SRC sql
  with inspections_violations as (
  select
  i.inspection, i.result,
  v.code
  from cleaned.inspections as i inner join cleaned.violations as v
  using(inspection)
  )


  select code, result,
  count(code) as count
  from inspections_violations
  group by rollup(code, result)
  order by count desc
  limit 10
#+END_SRC

#+RESULTS:
:RESULTS:
|   code | result |  count |
|--------+--------+--------|
| [NULL] | [NULL] | 608557 |
|     34 | [NULL] |  78234 |
|     35 | [NULL] |  69508 |
|     33 | [NULL] |  68978 |
|     38 | [NULL] |  59085 |
|     32 | [NULL] |  58764 |
|     34 | pass   |  50751 |
|     33 | pass   |  44834 |
|     35 | pass   |  44455 |
|     38 | pass   |  37577 |
:END:


*NOTE*: You could also split between, /major violation found/ and /minor violation found/,
but we will keep this simple for the moment.


/How often change the risk in a facility?/

#+BEGIN_SRC sql
  select
  entity_id, risk || '->' || previous_risk as changes,
  count(*)
  from
  (
  select date, entity_id, risk, lag(risk) over w as previous_risk
  from semantic.events
  window w as (partition by entity_id order by date asc)
  ) as t
  where (risk <>  previous_risk)
  group by entity_id, risk || '->' || previous_risk
  order by  count(*) desc, entity_id
#+END_SRC

#+RESULTS:
:RESULTS:
| entity_id | changes   | count |
|----------+-----------+-------|
|    17949 | high->low |     1 |
|    33725 | high->low |     1 |
:END:


Mmmm, it seems that there aren't a lot of changes in the =risk=
classification of a facility.

/What are the top 5 locations with more inspections?/

#+BEGIN_SRC sql
  select
  address, count(*) as total_inspections,
  coalesce( count(*) filter (where result = 'fail'), 0)
  as total_failures
  from cleaned.inspections
  group by address
  order by total_inspections desc
  limit 5;
#+END_SRC

#+RESULTS:
:RESULTS:
| address           | total_inspections | total_failures |
|-------------------+------------------+---------------|
| 11601 w touhy ave |             2020 |           257 |
| 5700 s cicero ave |              405 |            54 |
| 324 n leavitt st  |              363 |            86 |
| 500 w madison st  |              356 |            69 |
| 131 n clinton st  |              310 |            34 |
:END:
