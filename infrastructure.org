#+TITLE: Dirty duck: A triage's guided tour
#+AUTHOR: Center of Data Science for Public Policy
#+EMAIL: adolfo@uchicago.edu
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+PROPERTY: header-args:sql :engine postgresql
#+PROPERTY: header-args:sql+ :dbhost 0.0.0.0
#+PROPERTY: header-args:sql+ :dbport 5434
#+PROPERTY: header-args:sql+ :dbuser food_user
#+PROPERTY: header-args:sql+ :dbpassword some_password
#+PROPERTY: header-args:sql+ :database food
#+PROPERTY: header-args:sql+ :results table drawer
#+PROPERTY: header-args:shell     :results drawer
#+PROPERTY: header-args:ipython   :session food_inspections

* Infrastructure

  Besides data, in most of the data science projects you will need some
  other tools, for example a place to store the data (a database
  management system), a way
  for putting your model to work (an API) and a interface for looking
  the performace of your trained models (for this tutorial we are
  proposing [[https://github.com/dssg/tyra][tyra]] and supporting software for postmodeling analysis)

  We are proving a little script for managing all the infrastructure in
  a (hopefully) transparent way.

  Before creating the infrastructure, change the string =your_password=
  for something else in the file
  =infrastructure/food_db/.env_example=

  #+BEGIN_SRC shell :tangle infrastructure/env_example
    POSTGRES_DB=food
    POSTGRES_HOST=0.0.0.0
    POSTGRES_USER=food_user
    POSTGRES_DB=food
    POSTGRES_PORT=5434
    POSTGRES_PASSWORD=your_password

    UID=1000
    GID=1000
  #+END_SRC

  Then, change the name of the file to =.env=.

  Next run the following command

  #+BEGIN_SRC shell
    ./tutorial.sh
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  Usage: ./tutorial.sh {start|stop|build|rebuild|run|logs|status|destroy|all|}

  OPTIONS:
	 -h|help             Show this message
	 start
	 stop
	 rebuild
	 status
	 destroy
	 -t|triage
	 -a|all

  EXAMPLES:
	 All the infrastructure needed is turned on!
		  $ ./tutorial.sh start

	 Check the status of the containers:
		  $ ./tutorial.sh status

	 Stop the tutorial's infrastructure:
		  $ ./tutorial.sh stop

	 Connect to bastion:
		  $ ./tutorial.sh bastion

	 Destroy all the resources related to the tutorial:
		  $ ./tutorial.sh destroy

	 Run experiments:
		  $ ./tutorial.sh -r

	 Everything!:
		  $ ./tutorial.sh -a

  :END:

  We need to create the infrastructure so, =start= it

  #+BEGIN_SRC shell
    ./tutorial.sh start
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  :END:

  This will take some minutes the first time.

  You can check that everything is running smoothly with =status=

  #+BEGIN_SRC shell :results raw drawer
    ./tutorial.sh status
    :
  #+END_SRC

  #+RESULTS:
  :RESULTS:
       Name                    Command              State            Ports
  ---------------------------------------------------------------------------------
  food_db           docker-entrypoint.sh postgres   Up       0.0.0.0:5434->5432/tcp
  tutorial_triage   triage_experiment --help        Exit 0
  :END:


  The environment is composed (no pun intended) by three pieces: a
  =postgresql= database called =food_db=, a container that executes =triage=
  experiments and finally =bastion=, which includes a
  Login to the docker container called =bastion= using =postgresql= client
  (so you can interact with the database) and a full =python=
  environment (so you can code or modify the things that we will
  discuss in this tutorial). The idea is that you don't need to
  install anything in your laptop.

  For accessing to the =postgresql= client type:

  #+BEGIN_EXAMPLE shel
  ./tutorial.sh bastion
  #+END_EXAMPLE

  You will see something like:

  #+BEGIN_EXAMPLE shell
  root@485373fb3c64:/$
  #+END_EXAMPLE

  The number surely will be different (i.e. not =485373fb3c64=).

  Now the database is running, its named =food_db=, the single table in
  there named =inspections=

  Let's check the =schema= of =inspections= table, first, type the next
  command to connect to the database

  #+BEGIN_EXAMPLE shell
  psql ${FOOD_DB_URL}
  #+END_EXAMPLE

  and then, type the following command:

  #+BEGIN_SRC sql
    \d raw.inspections
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  | Table "raw.inspections" |                   |           |
  |-------------------------+-------------------+-----------|
  | Column                  | Type              | Modifiers |
  | inspection              | character varying | not null  |
  | dba_name                 | character varying |           |
  | aka_name                 | character varying |           |
  | license_num              | numeric           |           |
  | facility_type            | character varying |           |
  | risk                    | character varying |           |
  | address                 | character varying |           |
  | city                    | character varying |           |
  | state                   | character varying |           |
  | zip                     | character varying |           |
  | date                    | date              |           |
  | type                    | character varying |           |
  | results                 | character varying |           |
  | violations              | character varying |           |
  | latitude                | numeric           |           |
  | longitude               | numeric           |           |
  | location                | character varying |           |
  :END:

  Now, you can disconnect from the database typing =\q=




  *NOTE*: If you want to clean your laptop of all this, you should type
  =./tutorial.sh destroy=. But don't to that now!

  Well, you are all set now. Let's start now.
