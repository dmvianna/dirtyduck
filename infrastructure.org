#+TITLE: Dirty duck: A triage's guided tour
#+AUTHOR: Center of Data Science for Public Policy
#+EMAIL: adolfo@uchicago.edu
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+PROPERTY: header-args:sql :engine postgresql
#+PROPERTY: header-args:sql+ :dbhost 0.0.0.0
#+PROPERTY: header-args:sql+ :dbport 5434
#+PROPERTY: header-args:sql+ :dbuser food_user
#+PROPERTY: header-args:sql+ :dbpassword some_password
#+PROPERTY: header-args:sql+ :database food
#+PROPERTY: header-args:sql+ :results table drawer
#+PROPERTY: header-args:shell     :results drawer
#+PROPERTY: header-args:ipython   :session food_inspections

* Infrastructure

Most data science projects need several tools (in addition to the data):

    * place to store the data (a database management system)
    * way for putting your model to work (an API)
    * interface for looking the performace of your trained models (for this tutorial, we use tyra)

We provide a little script to manage all the infrastructure in a (hopefully) transparent way.

  Before creating the infrastructure, change the string =your_password=
  for something else in the file
  =infrastructure/.env_example=

  #+BEGIN_SRC shell :tangle infrastructure/env_example
    POSTGRES_DB=food
    POSTGRES_HOST=0.0.0.0
    POSTGRES_USER=food_user
    POSTGRES_DB=food
    POSTGRES_PORT=5434
    POSTGRES_PASSWORD=your_password

    UID=1000
    GID=1000
  #+END_SRC

  Then, change the name of the file to =.env=.

  To ensure everything works, run the following command

  #+BEGIN_SRC shell
    ./tutorial.sh
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  Usage: ./tutorial.sh {start|stop|build|rebuild|run|logs|status|destroy|all|}
  OPTIONS:
	 -h|help             Show this message
	 start
	 stop
	 rebuild
	 status
	 destroy
	 -t|triage
	 -a|all
  EXAMPLES:
	 All the infrastructure needed is turned on!
		  $ ./tutorial.sh start

	 Check the status of the containers:
		  $ ./tutorial.sh status

	 Stop the tutorial's infrastructure:
		  $ ./tutorial.sh stop

	 Connect to bastion:
		  $ ./tutorial.sh bastion

	 Destroy all the resources related to the tutorial:
		  $ ./tutorial.sh destroy

	 Run experiments:
		  $ ./tutorial.sh -r

	 Everything!:
		  $ ./tutorial.sh -a

  :END:

  To create the infrastructure, =start= it

  #+BEGIN_SRC shell
    ./tutorial.sh start
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  :END:

  This will take a few minutes the first time.

  You can check that everything is running smoothly with =status=

  #+BEGIN_SRC shell :results raw drawer
    ./tutorial.sh status
  #+END_SRC

  #+RESULTS:
  :RESULTS:
       Name                    Command              State            Ports
  ---------------------------------------------------------------------------------
  food_db           docker-entrypoint.sh postgres   Up       0.0.0.0:5434->5432/tcp
  tutorial_triage   triage_experiment --help        Exit 0
  :END:


  The environment consists of three pieces: 
      * a  =postgresql= database called =food_db=
      *  a container that executes =triage= experiments
      * =bastion=, which includes
      	*  Login to the docker container called =bastion= using =postgresql= client (so you can interact with the database)
	* a full =python= environment (so you can code or modify the things that we will discuss in this tutorial). 

  This is provided so that no installation of additional packages is required on your laptop.

  To access the =postgresql= client, type:

  #+BEGIN_EXAMPLE shel
  ./tutorial.sh bastion
  #+END_EXAMPLE

  You will see something like:

  #+BEGIN_EXAMPLE shell
  root@485373fb3c64:/$
  #+END_EXAMPLE

  (The number will be different i.e. not =485373fb3c64=).

  Now the database is running. The database name is =food_db= and the single table in the database is named =inspections=

  Let's check the =schema= of =inspections= table. First, connect to the database and then type the command to check the schema.

  #+BEGIN_EXAMPLE shell
    psql ${FOOD_DB_URL}
    \d raw.inspections
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  | Table "raw.inspections" |                   |           |
  |-------------------------+-------------------+-----------|
  | Column                  | Type              | Modifiers |
  | inspection              | character varying | not null  |
  | dba_name                 | character varying |           |
  | aka_name                 | character varying |           |
  | license_num              | numeric           |           |
  | facility_type            | character varying |           |
  | risk                    | character varying |           |
  | address                 | character varying |           |
  | city                    | character varying |           |
  | state                   | character varying |           |
  | zip                     | character varying |           |
  | date                    | date              |           |
  | type                    | character varying |           |
  | results                 | character varying |           |
  | violations              | character varying |           |
  | latitude                | numeric           |           |
  | longitude               | numeric           |           |
  | location                | character varying |           |
  :END:

  To disconnect from the database, type =\q= To exit out of the docker container, type =exit=.

  *NOTE*: If you want to clean your laptop of all this, you should type
  =./tutorial.sh destroy=. But don't to that now!

  Now you're all set for the infrastructure. Let's start with the actual data analysis and modeling.
