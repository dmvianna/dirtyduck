#+TITLE: Dirty duck: A triage's guided tour
#+AUTHOR: Center of Data Science for Public Policy
#+EMAIL: adolfo@uchicago.edu
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:sql :engine postgresql
#+PROPERTY: header-args:sql+ :dbhost 0.0.0.0
#+PROPERTY: header-args:sql+ :dbport 5434
#+PROPERTY: header-args:sql+ :dbuser food_user
#+PROPERTY: header-args:sql+ :dbpassword some_password
#+PROPERTY: header-args:sql+ :database food
#+PROPERTY: header-args:sql+ :results table drawer
#+PROPERTY: header-args:shell     :results drawer
#+PROPERTY: header-args:ipython   :session food_inspections


* Intro

  The [[https://data.cityofchicago.org/Health-Human-Services/Food-Inspections/4ijn-s7e5][Chicago's Food Inspections data set]] is well know, and it has been
  used in several examples around the web (e.g. [fn:4],  [fn:1], [fn:2])


* What do you need for this tutorial?

  [[http://www.docker.com][Docker]] and [[https://docs.docker.com/compose/][Docker Compose]] installed. That's it.
  Use the links for installation instructions.


* Description of the problem to solve

  We want to solve two problems: an /Early intervention system/ (*EIS*)
  and a /Inspection prioritization/. We will use the /same/ data set for both.


  In the first problem, we take the point of view of the restaurant's owner. Our question is:

#+begin_quote
Will my restaurant be inspected in the
/next X period of time?/
#+end_quote

Where $X$ could be 1 week, 1 month, 1 year, etc.

  As the restaurant's owner, knowing the answer to this question allows you to be prepared and take the pertinent actions.


  In the second second scenario, we take the point of view of the Chicago government. The aim is to 
  prioritize your limited resources (i.e. your inspection workforce). So, you use the same data to
  answering the second question:

#+begin_quote
Which X facilities are likely to violate some rule in the
  following Y period of time?
#+end_quote

  As before $Y$ is a length of time (1 month, 1 year, etc.). $X$ is a set of the restaurants to inspect. 
  Perhaps you are interested not in all the violations but rather the more serious ones. In this case, $X$ 
  would be a ranked or scored list of restaurants to inspect.

  This tutorial is divided in the following sections:

- [[file:infrastructure.org][Infrastructure Set-up]]
- [[file:data_exploration.org][Preparing your data]]
- [[file:triage_intro.org][Introduction to triage]]
- [[file:inspections.org][Modeling: Inspections prioritization]]
- [[file:eis.org][Modeling: Early Warning System]]
-

* What's next?

  - Add the shape file
    https://data.cityofchicago.org/api/geospatial/gdcf-axmw?method=export&format=Shapefile
  - Text analysis?
  - Run =pgdedup=
  - Routing based on the inspection list?
  - Add more data sources?
  - Postmodeling?
  - Bias analysis?


* Footnotes

[fn:4] [[https://chicago.github.io/food-inspections-evaluation/][Food Inspection Forecasting - Optimizing Inspections with Analytics]]

[fn:3] This problem is
related to the process of /deduplication/ and there is another tutorial
for that that uses anothe DSaPP tool: =pgdedup=.

[fn:1] [[https://youtu.be/lyDLAutA88s][David Beazley | Keynote: Built in Super Heroes]]

[fn:2] [[https://youtu.be/1dKonIT-Yak][Nicole Donnelly | Forecasting critical food violations at restaurants using open data]]
