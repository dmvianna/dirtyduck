#+TITLE: Dirty duck: A triage's guided tour
#+AUTHOR: Center of Data Science for Public Policy
#+EMAIL: adolfo@uchicago.edu
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:sql :engine postgresql
#+PROPERTY: header-args:sql+ :dbhost 0.0.0.0
#+PROPERTY: header-args:sql+ :dbport 5434
#+PROPERTY: header-args:sql+ :dbuser food_user
#+PROPERTY: header-args:sql+ :dbpassword some_password
#+PROPERTY: header-args:sql+ :database food
#+PROPERTY: header-args:sql+ :results table drawer
#+PROPERTY: header-args:shell     :results drawer
#+PROPERTY: header-args:ipython   :session food_inspections


* Intro

  The [[https://data.cityofchicago.org/Health-Human-Services/Food-Inspections/4ijn-s7e5][Chicago's Food Inspections data set]] is well know, and it has been
  used in several examples around the web (e.g. [fn:4],  [fn:1], [fn:2])


Inspection the join starts from outcomes (outcome centric) (if you haven't been inspected, we can not said anything about you)


EIS the join starts from entity (entity centric) (if you don't have an outcome you are doing good)

* What do you need for this tutorial?

  [[http://www.docker.com][Docker]] and [[https://docs.docker.com/compose/][Docker Compose]] installed. That's it.
  Use the links for installing instructions.



* Description of the problem to solve

  Actually, We want to solve two problems: an /Early intervention system/ (*EIS*)
  and a /Inspection prioritization/.


  We will use the /same/ data set, first, we will be the restaurant's
  owner, and we want to know:

#+begin_quote
Will my restaurant be inspected in the
/next X period of time?/
#+end_quote

Where $X$ could be 1 month, 1 week, 1 year,
etc.

  Knowing the answer to this question, allows you (as the restaurant's
  owner) to be prepared and take the pertinent actions.


  The second scenario, is the following:  you work for the Chicago's
  government, and you try
  to prioritize your resources (i.e. your inspection workforce), since
  they are limited. So, you will use the data (the same data set,
  remember) for answering the next
  question:

#+begin_quote
Which X facilities are likely to violate some rule in the
  following Y period of time?
#+end_quote

  In this case maybe you are interested not
  in all the violations but in the more grave.

  There are other questions that help to define the goal:

  - From Rayid's notes:

  /What are you inspecting?/ (people, places, other)
  /How far do you want to predict?/ (e.g. 1 mo, 6mo, 12 mo, etc)
  /How often do you want to update the list?/ (e.g. 1 mo, 6mo, 12 mo, etc)
  /What do you want to optimize for?/ (e.g. efficiency, long term
  compliance, novelty)

  One of the trickiest part of the inspection prioritization problem is
  that the data gives you $P(V|I)$ i.e. the probability of finding a
  violation given that (or conditioned to) an inspection occurred, but
  the thing that is interesting is $P(V)$ the probability of a violation
  ...
w
  - /Write more about using bayes theorem/

  - /Write more about how this problem is related to send police to areas with crime and how this perpetuate some discrimination/



* Looking the results at Tyra

  *TODO:* /Add some images/

* What's next?

  - Add the shape file
    https://data.cityofchicago.org/api/geospatial/gdcf-axmw?method=export&format=Shapefile
  - Text analysis?
  - Run =pgdedup=
  - Routing based on the inspection list?
  - Add more data sources?
  - Postmodeling?
  - Bias analysis?


* Appendix: What are all those files?

* Appendix: Getting help

* Additional DBs

  - [[https://data.cityofchicago.org/Community-Economic-Development/Business-Licenses/r5kz-chrr][Business Licenses]]
  - Food Inspections
  - [[https://data.cityofchicago.org/Public-Safety/Crimes-2001-to-present/ijzp-q8t2][Crime]]
  - Garbage Cart Complaints
  - [[https://data.cityofchicago.org/Service-Requests/311-Service-Requests-Sanitation-Code-Complaints/me59-5fac][Sanitation Complaints]]
  - Weather
  - Sanitarian Information


* Footnotes

[fn:4] [[https://chicago.github.io/food-inspections-evaluation/][Food Inspection Forecasting - Optimizing Inspections with Analytics]]

[fn:3] This problem is
related to the process of /deduplication/ and there is another tutorial
for that that uses anothe DSaPP tool: =pgdedup=.

[fn:1] [[https://youtu.be/lyDLAutA88s][David Beazley | Keynote: Built in Super Heroes]]

[fn:2] [[https://youtu.be/1dKonIT-Yak][Nicole Donnelly | Forecasting critical food violations at restaurants using open data]]




* Temp stuff


  Before doing that, let's check how many different =dba_name= we have.

  #+BEGIN_SRC sql :results table drawer
    select
    count(distinct dba_name) as different_names
    from inspections;
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  | different_names |
  |----------------|
  |          25107 |
  :END:

  #+BEGIN_SRC sql :results table drawer
    select
    dba_name,
    btrim(upper(regexp_replace(replace(dba_name, '''', ''), '[^a-zA-Z0-9 ]', '', 'g'))) as cleaned_name
    from inspections
    limit 30
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  | dba_name                                      | cleaned_name                                 |
  |----------------------------------------------+---------------------------------------------|
  | D AND Y GROCERY                              | D AND Y GROCERY                             |
  | ONE STOP FOOD MARKET                         | ONE STOP FOOD MARKET                        |
  | CITGO                                        | CITGO                                       |
  | KHAN DOLLAR STATION                          | KHAN DOLLAR STATION                         |
  | FOSTER & BROADWAY BP/AUTOTECH                | FOSTER  BROADWAY BPAUTOTECH                 |
  | Rizzo's Bar & Inn                            | RIZZOS BAR  INN                             |
  | Rizzo's Bar & Inn                            | RIZZOS BAR  INN                             |
  | SAVE-A-LOT #882                              | SAVEALOT 882                                |
  | MEDITERRANEAN EXPRESS                        | MEDITERRANEAN EXPRESS                       |
  | SWEET FREAKS                                 | SWEET FREAKS                                |
  | MINGHIN CUISINE KITCHEN                      | MINGHIN CUISINE KITCHEN                     |
  | HAPPY GROCERY & DOLLAR                       | HAPPY GROCERY  DOLLAR                       |
  | ARDEN RESTAURANT                             | ARDEN RESTAURANT                            |
  | TBD                                          | TBD                                         |
  | MAGGIE GYROS & CHICKEN                       | MAGGIE GYROS  CHICKEN                       |
  | WOLCOTT TAP                                  | WOLCOTT TAP                                 |
  | WOLCOTT TAP                                  | WOLCOTT TAP                                 |
  | 3JJJ'S BETTER TASTE JAMAICAN JERK RESTAURANT | 3JJJS BETTER TASTE JAMAICAN JERK RESTAURANT |
  | THE HARDING TAVERN                           | THE HARDING TAVERN                          |
  | ZACATACOS, II. INC                           | ZACATACOS II INC                            |
  | ONESTI PIZZERIA INC                          | ONESTI PIZZERIA INC                         |
  | 3JJJ'S BETTER TASTE JAMAICAN JERK RESTAURANT | 3JJJS BETTER TASTE JAMAICAN JERK RESTAURANT |
  | NORMAN'S                                     | NORMANS                                     |
  | MCCB                                         | MCCB                                        |
  | CHECKERS DRIVE-IN RESTAURANTS, INC           | CHECKERS DRIVEIN RESTAURANTS INC            |
  | Rizzo's Bar & Inn                            | RIZZOS BAR  INN                             |
  | GRILL 87                                     | GRILL 87                                    |
  | KFC                                          | KFC                                         |
  | PACO'S TACOS 2                               | PACOS TACOS 2                               |
  | MARTINI CLUB                                 | MARTINI CLUB                                |
  :END:


#+BEGIN_SRC ipython :session
  %matplotlib inline
  import matplotlib.pyplot as plt
  import numpy as np
#+END_SRC


#+BEGIN_SRC ipython :session :file /tmp/image.png :exports both
  plt.hist(np.random.randn(20000), bins=200)
#+END_SRC
