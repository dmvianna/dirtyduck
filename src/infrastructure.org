#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+PROPERTY: header-args:sql :engine postgresql
#+PROPERTY: header-args:sql+ :dbhost 0.0.0.0
#+PROPERTY: header-args:sql+ :dbport 5434
#+PROPERTY: header-args:sql+ :dbuser food_user
#+PROPERTY: header-args:sql+ :dbpassword some_password
#+PROPERTY: header-args:sql+ :database food
#+PROPERTY: header-args:sql+ :results table drawer
#+PROPERTY: header-args:sh  :results verbatim org
#+PROPERTY: header-args:sh+ :prologue exec 2>&1 :epilogue :
#+PROPERTY: header-args:ipython   :session Food_inspections


* Infrastructure

   In every data science project you will need several tools which
   will help you to analyze the data in an efficient[fn:1] manner.
   Examples of this tools are: a place to store the data (a database
   management system or *DBMS*), a way
   for putting your model to work, i.e. one way that allows to model
   to ingest new data and predict on it (an *API*) and a interface for
   looking the performace of your trained models (a governance tool). 

   We are proving a little script for managing all the infrastructure[fn:2] in
   a (hopefully) transparent way.

   The provided environment is composed by /four/ Pieces:
   - a =postgresql= database called =food_db=,
   - a container that executes =triage= experiments,
   - a /web server/ that shows this tutorial,
   - and finally =bastion=, which includes a =postgresql= client
   (so you can interact with the database) and a full =python=
   environment (so you can code or modify the things that we will
   discuss in this Tutorial). 

   The idea is that you don't need to install anything in your laptop.

   Run the following

   #+BEGIN_SRC sh 
    ./tutorial.sh
   #+END_SRC

   #+RESULTS:
   #+BEGIN_SRC org
  Usage: ./tutorial.sh {start|stop|build|rebuild|run|logs|status|destroy|all|}

  OPTIONS:
     -h|help             Show this message
     start
     stop
     rebuild
     status
     destroy
     -t|triage
     -a|all

  INFRASTRUCTURE:
     All the infrastructure needed is turned on!
	  $ ./tutorial.sh start

     Check the status of the containers:
	  $ ./tutorial.sh status

     Stop the tutorial's infrastructure:
	  $ ./tutorial.sh stop

     Destroy all the resources related to the tutorial:
	  $ ./tutorial.sh destroy

     Infrastructure logs:
	  $ ./tutorial.sh -l

  EXPERIMENTS:
     NOTE:
	The following commands assume that "sample_experiment_config.yaml"
	is located inside triage/experiment_config  directory

     Run one experiment:
	  $ ./tutorial.sh -t --config_file sample_experiment_config.yaml run

     Run one experiment, without replacing matrices or models if already exist and with debug enabled:
	  $ ./tutorial.sh -t --config_file sample_experiment_config.yaml --no-replace --debug run

     Validate experiment configuration file:
	  $ ./tutorial.sh triage --config_file sample_experiment_config.yaml validate

     Show experiment's temporal cross-validation blocks:
	  $ ./tutorial.sh -t --config_file sample_experiment_config.yaml show_temporal_blocks

     Plot the model number 4 (if it is a Decision Tree or a Random Forest):
	  $ ./tutorial.sh -t --config_file sample_experiment_config.yaml show_model_plot --model 4

     Triage help:
	  $ ./tutorial.sh triage --help

   #+END_SRC

   Following the printed instructuons in the screen, we can start the
   infrastructure with:

   #+BEGIN_EXAMPLE sh
    ./tutorial.sh start
   #+END_EXAMPLE

   You can check that everything is running smoothly with =status=

   #+BEGIN_SRC sh
    ./tutorial.sh status
    :
   #+END_SRC

   #+RESULTS:
   #+BEGIN_SRC org
       Name                    Command              State           Ports         
  --------------------------------------------------------------------------------
  food_db           docker-entrypoint.sh postgres   Up      0.0.0.0:5434->5432/tcp
  tutorial_server   nginx -g daemon off;            Up      0.0.0.0:80->80/tcp    
   #+END_SRC

   For accessing to the =postgresql= client type:

   #+BEGIN_EXAMPLE sh
  ./tutorial.sh bastion
   #+END_EXAMPLE

   Your prompt should change to something like:

   #+BEGIN_EXAMPLE sh
  root@485373fb3c64:/$
   #+END_EXAMPLE

   *NOTE*: The number surely will be different (i.e. not =485373fb3c64=).

   Type the next command to connect to the database

   #+BEGIN_EXAMPLE sh
  psql ${FOOD_DB_URL}
   #+END_EXAMPLE

   The prompt will change again to

#+BEGIN_EXAMPLE sh
   psql (9.6.7, server 10.2 (Debian 10.2-1.pgdg90+1))
   WARNING: psql major version 9.6, server major version 10.
         Some psql features might not work.
   Type "help" for help.

   food=# 
#+END_EXAMPLE

   The database is running and its named =food=. It should contain a
   single table named =inspections=  in the =schema= =Raw=. 
   Let's check the =inspections= table, type the following command:

   #+BEGIN_SRC sql
    \d raw.inspections
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   | Table "raw.inspections" |                   |           |
   |-------------------------+-------------------+-----------|
   | Column                  | Type              | Modifiers |
   | inspection              | character varying | not null  |
   | dba_name                 | character varying |           |
   | aka_name                 | character varying |           |
   | license_num              | numeric           |           |
   | facility_type            | character varying |           |
   | risk                    | character varying |           |
   | address                 | character varying |           |
   | city                    | character varying |           |
   | state                   | character varying |           |
   | zip                     | character varying |           |
   | date                    | date              |           |
   | type                    | character varying |           |
   | results                 | character varying |           |
   | violations              | character varying |           |
   | latitude                | numeric           |           |
   | longitude               | numeric           |           |
   | location                | character varying |           |
   :END:

   That is it. This is our "raw" data. We will work from here.

   You can disconnect from the database typing =\q=. But don't leave
   =bastion= yet. You should return to the same weird prompt:

   #+BEGIN_EXAMPLE sh
  root@485373fb3c64:/$
   #+END_EXAMPLE


* Footnotes

[fn:2] And other things through this tutorial, like the execution of
the model training, etc.

[fn:1] Reproducible, reportable, scalable, flexible, etc.
